//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using static Unity.Mathematics.FixedPoint.MathFp;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace Unity.Mathematics.FixedPoint
{
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct Fp2x2 : System.IEquatable<Fp2x2>, IFormattable
    {
        public Fp2 c0;
        public Fp2 c1;

        /// <summary>Fp2x2 identity transform.</summary>
        public static readonly Fp2x2 identity = new Fp2x2((Fp)1, (Fp)0,   (Fp)0, (Fp)1);

        /// <summary>Fp2x2 zero value.</summary>
        public static readonly Fp2x2 zero;

        /// <summary>Constructs a Fp2x2 matrix from two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(Fp2 c0, Fp2 c1)
        {
            this.c0 = c0;
            this.c1 = c1;
        }

        /// <summary>Constructs a Fp2x2 matrix from 4 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(Fp m00, Fp m01,
                     Fp m10, Fp m11)
        {
            this.c0 = new Fp2(m00, m10);
            this.c1 = new Fp2(m01, m11);
        }

        /// <summary>Constructs a Fp2x2 matrix from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(Fp v)
        {
            this.c0 = v;
            this.c1 = v;
        }

        /// <summary>Constructs a Fp2x2 matrix from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(int v)
        {
            this.c0 = (Fp2)v;
            this.c1 = (Fp2)v;
        }

        /// <summary>Constructs a Fp2x2 matrix from a int2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(int2x2 v)
        {
            this.c0 = (Fp2)v.c0;
            this.c1 = (Fp2)v.c1;
        }

        /// <summary>Constructs a Fp2x2 matrix from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(uint v)
        {
            this.c0 = (Fp2)v;
            this.c1 = (Fp2)v;
        }

        /// <summary>Constructs a Fp2x2 matrix from a uint2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2x2(uint2x2 v)
        {
            this.c0 = (Fp2)v.c0;
            this.c1 = (Fp2)v.c1;
        }


        /// <summary>Implicitly converts a single Fp value to a Fp2x2 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Fp2x2(Fp v) { return new Fp2x2(v); }

        /// <summary>Explicitly converts a single int value to a Fp2x2 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2x2(int v) { return new Fp2x2(v); }

        /// <summary>Explicitly converts a int2x2 matrix to a Fp2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2x2(int2x2 v) { return new Fp2x2(v); }

        /// <summary>Explicitly converts a single uint value to a Fp2x2 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2x2(uint v) { return new Fp2x2(v); }

        /// <summary>Explicitly converts a uint2x2 matrix to a Fp2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2x2(uint2x2 v) { return new Fp2x2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator * (Fp2x2 lhs, Fp2x2 rhs) { return new Fp2x2 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator * (Fp2x2 lhs, Fp rhs) { return new Fp2x2 (lhs.c0 * rhs, lhs.c1 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator * (Fp lhs, Fp2x2 rhs) { return new Fp2x2 (lhs * rhs.c0, lhs * rhs.c1); }


        /// <summary>Returns the result of a componentwise addition operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator + (Fp2x2 lhs, Fp2x2 rhs) { return new Fp2x2 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator + (Fp2x2 lhs, Fp rhs) { return new Fp2x2 (lhs.c0 + rhs, lhs.c1 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator + (Fp lhs, Fp2x2 rhs) { return new Fp2x2 (lhs + rhs.c0, lhs + rhs.c1); }


        /// <summary>Returns the result of a componentwise subtraction operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator - (Fp2x2 lhs, Fp2x2 rhs) { return new Fp2x2 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator - (Fp2x2 lhs, Fp rhs) { return new Fp2x2 (lhs.c0 - rhs, lhs.c1 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator - (Fp lhs, Fp2x2 rhs) { return new Fp2x2 (lhs - rhs.c0, lhs - rhs.c1); }


        /// <summary>Returns the result of a componentwise division operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator / (Fp2x2 lhs, Fp2x2 rhs) { return new Fp2x2 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1); }

        /// <summary>Returns the result of a componentwise division operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator / (Fp2x2 lhs, Fp rhs) { return new Fp2x2 (lhs.c0 / rhs, lhs.c1 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator / (Fp lhs, Fp2x2 rhs) { return new Fp2x2 (lhs / rhs.c0, lhs / rhs.c1); }


        /// <summary>Returns the result of a componentwise modulus operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator % (Fp2x2 lhs, Fp2x2 rhs) { return new Fp2x2 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator % (Fp2x2 lhs, Fp rhs) { return new Fp2x2 (lhs.c0 % rhs, lhs.c1 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator % (Fp lhs, Fp2x2 rhs) { return new Fp2x2 (lhs % rhs.c0, lhs % rhs.c1); }


        /// <summary>Returns the result of a componentwise increment operation on a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator ++ (Fp2x2 val) { return new Fp2x2 (++val.c0, ++val.c1); }


        /// <summary>Returns the result of a componentwise decrement operation on a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator -- (Fp2x2 val) { return new Fp2x2 (--val.c0, --val.c1); }


        /// <summary>Returns the result of a componentwise less than operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator < (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator < (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 < rhs, lhs.c1 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator < (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs < rhs.c0, lhs < rhs.c1); }


        /// <summary>Returns the result of a componentwise less or equal operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator <= (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator <= (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 <= rhs, lhs.c1 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator <= (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs <= rhs.c0, lhs <= rhs.c1); }


        /// <summary>Returns the result of a componentwise greater than operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator > (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator > (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 > rhs, lhs.c1 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator > (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs > rhs.c0, lhs > rhs.c1); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator >= (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator >= (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 >= rhs, lhs.c1 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator >= (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs >= rhs.c0, lhs >= rhs.c1); }


        /// <summary>Returns the result of a componentwise unary minus operation on a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator - (Fp2x2 val) { return new Fp2x2 (-val.c0, -val.c1); }


        /// <summary>Returns the result of a componentwise unary plus operation on a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 operator + (Fp2x2 val) { return new Fp2x2 (+val.c0, +val.c1); }


        /// <summary>Returns the result of a componentwise equality operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator == (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator == (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 == rhs, lhs.c1 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator == (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs == rhs.c0, lhs == rhs.c1); }


        /// <summary>Returns the result of a componentwise not equal operation on two Fp2x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator != (Fp2x2 lhs, Fp2x2 rhs) { return new bool2x2 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp2x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator != (Fp2x2 lhs, Fp rhs) { return new bool2x2 (lhs.c0 != rhs, lhs.c1 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp value and a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2x2 operator != (Fp lhs, Fp2x2 rhs) { return new bool2x2 (lhs != rhs.c0, lhs != rhs.c1); }



        /// <summary>Returns the Fp2 element at a specified index.</summary>
        unsafe public ref Fp2 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (Fp2x2* array = &this) { return ref ((Fp2*)array)[index]; }
            }
        }

        /// <summary>Returns true if the Fp2x2 is equal to a given Fp2x2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Fp2x2 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1); }

        /// <summary>Returns true if the Fp2x2 is equal to a given Fp2x2, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((Fp2x2)o); }


        /// <summary>Returns a hash code for the Fp2x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)MathFp.hash(this); }


        /// <summary>Returns a string representation of the Fp2x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("Fp2x2({0}, {1},  {2}, {3})", c0.x, c1.x, c0.y, c1.y);
        }

        /// <summary>Returns a string representation of the Fp2x2 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("Fp2x2({0}, {1},  {2}, {3})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider));
        }

    }

    public static partial class MathFp
    {
        /// <summary>Returns a Fp2x2 matrix constructed from two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(Fp2 c0, Fp2 c1) { return new Fp2x2(c0, c1); }

        /// <summary>Returns a Fp2x2 matrix constructed from from 4 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(Fp m00, Fp m01,
                                  Fp m10, Fp m11)
        {
            return new Fp2x2(m00, m01,
                             m10, m11);
        }

        /// <summary>Returns a Fp2x2 matrix constructed from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(Fp v) { return new Fp2x2(v); }

        /// <summary>Returns a Fp2x2 matrix constructed from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(int v) { return new Fp2x2(v); }

        /// <summary>Return a Fp2x2 matrix constructed from a int2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(int2x2 v) { return new Fp2x2(v); }

        /// <summary>Returns a Fp2x2 matrix constructed from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(uint v) { return new Fp2x2(v); }

        /// <summary>Return a Fp2x2 matrix constructed from a uint2x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 Fp2x2(uint2x2 v) { return new Fp2x2(v); }

        /// <summary>Return the Fp2x2 transpose of a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 transpose(Fp2x2 v)
        {
            return Fp2x2(
                v.c0.x, v.c0.y,
                v.c1.x, v.c1.y);
        }

        /// <summary>Returns the Fp2x2 full inverse of a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x2 inverse(Fp2x2 m)
        {
            Fp a = m.c0.x;
            Fp b = m.c1.x;
            Fp c = m.c0.y;
            Fp d = m.c1.y;

            // ** NOTE:忽略计算过程中产生的极小值
            Fp det = IgnoreTooSmallNumber(a * d) - IgnoreTooSmallNumber(b * c);

            return IgnoreTooSmallNumber(Fp2x2(d, -b, -c, a) * ((Fp)1 / det));
        }

        /// <summary>Returns the determinant of a Fp2x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp determinant(Fp2x2 m)
        {
            Fp a = m.c0.x;
            Fp b = m.c1.x;
            Fp c = m.c0.y;
            Fp d = m.c1.y;

            return a * d - b * c;
        }

        /// <summary>Returns a uint hash code of a Fp2x2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(Fp2x2 v)
        {
            return csum(asuint(v.c0) * uint2(0xFA3A3285u, 0xAD55999Du) +
                        asuint(v.c1) * uint2(0xDCDD5341u, 0x94DDD769u)) + 0xA1E92D39u;
        }

        /// <summary>
        /// Returns a uint2 vector hash code of a Fp2x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint2 hashwide(Fp2x2 v)
        {
            return (asuint(v.c0) * uint2(0x4583C801u, 0x9536A0F5u) +
                    asuint(v.c1) * uint2(0xAF816615u, 0x9AF8D62Du)) + 0xE3600729u;
        }

    }
}
