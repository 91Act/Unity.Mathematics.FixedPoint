//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using static Unity.Mathematics.FixedPoint.MathFp;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace Unity.Mathematics.FixedPoint
{
    [DebuggerTypeProxy(typeof(Fp2.DebuggerProxy))]
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct Fp2 : System.IEquatable<Fp2>, IFormattable
    {
        public Fp x;
        public Fp y;

        /// <summary>Fp2 zero value.</summary>
        public static readonly Fp2 zero;

        /// <summary>Constructs a Fp2 vector from two Fp values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(Fp x, Fp y)
        { 
            this.x = x;
            this.y = y;
        }

        /// <summary>Constructs a Fp2 vector from a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(Fp2 xy)
        { 
            this.x = xy.x;
            this.y = xy.y;
        }

        /// <summary>Constructs a Fp2 vector from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(Fp v)
        {
            this.x = v;
            this.y = v;
        }

        /// <summary>Constructs a Fp2 vector from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(int v)
        {
            this.x = (Fp)v;
            this.y = (Fp)v;
        }

        /// <summary>Constructs a Fp2 vector from a int2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(int2 v)
        {
            this.x = (Fp)v.x;
            this.y = (Fp)v.y;
        }

        /// <summary>Constructs a Fp2 vector from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(uint v)
        {
            this.x = (Fp)v;
            this.y = (Fp)v;
        }

        /// <summary>Constructs a Fp2 vector from a uint2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp2(uint2 v)
        {
            this.x = (Fp)v.x;
            this.y = (Fp)v.y;
        }


        /// <summary>Implicitly converts a single Fp value to a Fp2 vector by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Fp2(Fp v) { return new Fp2(v); }

        /// <summary>Explicitly converts a single int value to a Fp2 vector by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2(int v) { return new Fp2(v); }

        /// <summary>Explicitly converts a int2 vector to a Fp2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2(int2 v) { return new Fp2(v); }

        /// <summary>Explicitly converts a single uint value to a Fp2 vector by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2(uint v) { return new Fp2(v); }

        /// <summary>Explicitly converts a uint2 vector to a Fp2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp2(uint2 v) { return new Fp2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator * (Fp2 lhs, Fp2 rhs) { return new Fp2 (lhs.x * rhs.x, lhs.y * rhs.y); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator * (Fp2 lhs, Fp rhs) { return new Fp2 (lhs.x * rhs, lhs.y * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator * (Fp lhs, Fp2 rhs) { return new Fp2 (lhs * rhs.x, lhs * rhs.y); }


        /// <summary>Returns the result of a componentwise addition operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator + (Fp2 lhs, Fp2 rhs) { return new Fp2 (lhs.x + rhs.x, lhs.y + rhs.y); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator + (Fp2 lhs, Fp rhs) { return new Fp2 (lhs.x + rhs, lhs.y + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator + (Fp lhs, Fp2 rhs) { return new Fp2 (lhs + rhs.x, lhs + rhs.y); }


        /// <summary>Returns the result of a componentwise subtraction operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator - (Fp2 lhs, Fp2 rhs) { return new Fp2 (lhs.x - rhs.x, lhs.y - rhs.y); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator - (Fp2 lhs, Fp rhs) { return new Fp2 (lhs.x - rhs, lhs.y - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator - (Fp lhs, Fp2 rhs) { return new Fp2 (lhs - rhs.x, lhs - rhs.y); }


        /// <summary>Returns the result of a componentwise division operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator / (Fp2 lhs, Fp2 rhs) { return new Fp2 (lhs.x / rhs.x, lhs.y / rhs.y); }

        /// <summary>Returns the result of a componentwise division operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator / (Fp2 lhs, Fp rhs) { return new Fp2 (lhs.x / rhs, lhs.y / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator / (Fp lhs, Fp2 rhs) { return new Fp2 (lhs / rhs.x, lhs / rhs.y); }


        /// <summary>Returns the result of a componentwise modulus operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator % (Fp2 lhs, Fp2 rhs) { return new Fp2 (lhs.x % rhs.x, lhs.y % rhs.y); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator % (Fp2 lhs, Fp rhs) { return new Fp2 (lhs.x % rhs, lhs.y % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator % (Fp lhs, Fp2 rhs) { return new Fp2 (lhs % rhs.x, lhs % rhs.y); }


        /// <summary>Returns the result of a componentwise increment operation on a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator ++ (Fp2 val) { return new Fp2 (++val.x, ++val.y); }


        /// <summary>Returns the result of a componentwise decrement operation on a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator -- (Fp2 val) { return new Fp2 (--val.x, --val.y); }


        /// <summary>Returns the result of a componentwise less than operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x < rhs.x, lhs.y < rhs.y); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x < rhs, lhs.y < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator < (Fp lhs, Fp2 rhs) { return new bool2 (lhs < rhs.x, lhs < rhs.y); }


        /// <summary>Returns the result of a componentwise less or equal operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x <= rhs.x, lhs.y <= rhs.y); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x <= rhs, lhs.y <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator <= (Fp lhs, Fp2 rhs) { return new bool2 (lhs <= rhs.x, lhs <= rhs.y); }


        /// <summary>Returns the result of a componentwise greater than operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x > rhs.x, lhs.y > rhs.y); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x > rhs, lhs.y > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator > (Fp lhs, Fp2 rhs) { return new bool2 (lhs > rhs.x, lhs > rhs.y); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x >= rhs.x, lhs.y >= rhs.y); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x >= rhs, lhs.y >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator >= (Fp lhs, Fp2 rhs) { return new bool2 (lhs >= rhs.x, lhs >= rhs.y); }


        /// <summary>Returns the result of a componentwise unary minus operation on a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator - (Fp2 val) { return new Fp2 (-val.x, -val.y); }


        /// <summary>Returns the result of a componentwise unary plus operation on a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 operator + (Fp2 val) { return new Fp2 (+val.x, +val.y); }


        /// <summary>Returns the result of a componentwise equality operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x == rhs.x, lhs.y == rhs.y); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x == rhs, lhs.y == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator == (Fp lhs, Fp2 rhs) { return new bool2 (lhs == rhs.x, lhs == rhs.y); }


        /// <summary>Returns the result of a componentwise not equal operation on two Fp2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (Fp2 lhs, Fp2 rhs) { return new bool2 (lhs.x != rhs.x, lhs.y != rhs.y); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp2 vector and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (Fp2 lhs, Fp rhs) { return new bool2 (lhs.x != rhs, lhs.y != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp value and a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool2 operator != (Fp lhs, Fp2 rhs) { return new bool2 (lhs != rhs.x, lhs != rhs.y); }




        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 xyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(x, y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yxxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yxxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yxyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yxyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yyxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yyxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yyyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp4 yyyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp4(y, y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 xxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(x, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 xxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(x, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 xyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(x, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 xyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(x, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 yxx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(y, x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 yxy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(y, x, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 yyx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(y, y, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp3 yyy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp3(y, y, y); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp2 xx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp2(x, x); }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp2 xy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp2(x, y); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { x = value.x; y = value.y; }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp2 yx
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp2(y, x); }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set { y = value.x; x = value.y; }
        }


        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Fp2 yy
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return new Fp2(y, y); }
        }



        /// <summary>Returns the Fp element at a specified index.</summary>
        unsafe public Fp this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (Fp2* array = &this) { return ((Fp*)array)[index]; }
            }
            set
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (Fp* array = &x) { array[index] = value; }
            }
        }

        /// <summary>Returns true if the Fp2 is equal to a given Fp2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Fp2 rhs) { return x == rhs.x && y == rhs.y; }

        /// <summary>Returns true if the Fp2 is equal to a given Fp2, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((Fp2)o); }


        /// <summary>Returns a hash code for the Fp2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)MathFp.hash(this); }


        internal sealed class DebuggerProxy
        {
            public Fp x;
            public Fp y;
            public DebuggerProxy(Fp2 v)
            {
                x = v.x;
                y = v.y;
            }
        }

    }

    public static partial class MathFp
    {
        /// <summary>Returns a Fp2 vector constructed from two Fp values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(Fp x, Fp y) { return new Fp2(x, y); }

        /// <summary>Returns a Fp2 vector constructed from a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(Fp2 xy) { return new Fp2(xy); }

        /// <summary>Returns a Fp2 vector constructed from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(Fp v) { return new Fp2(v); }

        /// <summary>Returns a Fp2 vector constructed from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(int v) { return new Fp2(v); }

        /// <summary>Return a Fp2 vector constructed from a int2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(int2 v) { return new Fp2(v); }

        /// <summary>Returns a Fp2 vector constructed from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(uint v) { return new Fp2(v); }

        /// <summary>Return a Fp2 vector constructed from a uint2 vector by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 Fp2(uint2 v) { return new Fp2(v); }

        /// <summary>Returns a uint hash code of a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(Fp2 v)
        {
            return csum(asuint(v) * uint2(0x6E624EB7u, 0x7383ED49u)) + 0xDD49C23Bu;
        }

        /// <summary>
        /// Returns a uint2 vector hash code of a Fp2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint2 hashwide(Fp2 v)
        {
            return (asuint(v) * uint2(0xEBD0D005u, 0x91475DF7u)) + 0x55E84827u;
        }

        /// <summary>Returns the result of specified shuffling of the components from two Fp2 vectors into a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp shuffle(Fp2 a, Fp2 b, ShuffleComponent x)
        {
            return select_shuffle_component(a, b, x);
        }

        /// <summary>Returns the result of specified shuffling of the components from two Fp2 vectors into a Fp2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2 shuffle(Fp2 a, Fp2 b, ShuffleComponent x, ShuffleComponent y)
        {
            return Fp2(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y));
        }

        /// <summary>Returns the result of specified shuffling of the components from two Fp2 vectors into a Fp3 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3 shuffle(Fp2 a, Fp2 b, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z)
        {
            return Fp3(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y),
                select_shuffle_component(a, b, z));
        }

        /// <summary>Returns the result of specified shuffling of the components from two Fp2 vectors into a Fp4 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp4 shuffle(Fp2 a, Fp2 b, ShuffleComponent x, ShuffleComponent y, ShuffleComponent z, ShuffleComponent w)
        {
            return Fp4(
                select_shuffle_component(a, b, x),
                select_shuffle_component(a, b, y),
                select_shuffle_component(a, b, z),
                select_shuffle_component(a, b, w));
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static Fp select_shuffle_component(Fp2 a, Fp2 b, ShuffleComponent component)
        {
            switch(component)
            {
                case ShuffleComponent.LeftX:
                    return a.x;
                case ShuffleComponent.LeftY:
                    return a.y;
                case ShuffleComponent.RightX:
                    return b.x;
                case ShuffleComponent.RightY:
                    return b.y;
                default:
                    throw new System.ArgumentException("Invalid shuffle component: " + (int)component);
            }
        }

    }
}
