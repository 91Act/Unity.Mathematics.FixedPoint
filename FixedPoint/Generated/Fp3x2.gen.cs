//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using static Unity.Mathematics.FixedPoint.MathFp;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace Unity.Mathematics.FixedPoint
{
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct Fp3x2 : System.IEquatable<Fp3x2>, IFormattable
    {
        public Fp3 c0;
        public Fp3 c1;

        /// <summary>Fp3x2 zero value.</summary>
        public static readonly Fp3x2 zero;

        /// <summary>Constructs a Fp3x2 matrix from two Fp3 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(Fp3 c0, Fp3 c1)
        {
            this.c0 = c0;
            this.c1 = c1;
        }

        /// <summary>Constructs a Fp3x2 matrix from 6 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(Fp m00, Fp m01,
                     Fp m10, Fp m11,
                     Fp m20, Fp m21)
        {
            this.c0 = new Fp3(m00, m10, m20);
            this.c1 = new Fp3(m01, m11, m21);
        }

        /// <summary>Constructs a Fp3x2 matrix from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(Fp v)
        {
            this.c0 = v;
            this.c1 = v;
        }

        /// <summary>Constructs a Fp3x2 matrix from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(int v)
        {
            this.c0 = (Fp3)v;
            this.c1 = (Fp3)v;
        }

        /// <summary>Constructs a Fp3x2 matrix from a int3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(int3x2 v)
        {
            this.c0 = (Fp3)v.c0;
            this.c1 = (Fp3)v.c1;
        }

        /// <summary>Constructs a Fp3x2 matrix from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(uint v)
        {
            this.c0 = (Fp3)v;
            this.c1 = (Fp3)v;
        }

        /// <summary>Constructs a Fp3x2 matrix from a uint3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x2(uint3x2 v)
        {
            this.c0 = (Fp3)v.c0;
            this.c1 = (Fp3)v.c1;
        }


        /// <summary>Implicitly converts a single Fp value to a Fp3x2 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Fp3x2(Fp v) { return new Fp3x2(v); }

        /// <summary>Explicitly converts a single int value to a Fp3x2 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x2(int v) { return new Fp3x2(v); }

        /// <summary>Explicitly converts a int3x2 matrix to a Fp3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x2(int3x2 v) { return new Fp3x2(v); }

        /// <summary>Explicitly converts a single uint value to a Fp3x2 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x2(uint v) { return new Fp3x2(v); }

        /// <summary>Explicitly converts a uint3x2 matrix to a Fp3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x2(uint3x2 v) { return new Fp3x2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator * (Fp3x2 lhs, Fp3x2 rhs) { return new Fp3x2 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator * (Fp3x2 lhs, Fp rhs) { return new Fp3x2 (lhs.c0 * rhs, lhs.c1 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator * (Fp lhs, Fp3x2 rhs) { return new Fp3x2 (lhs * rhs.c0, lhs * rhs.c1); }


        /// <summary>Returns the result of a componentwise addition operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator + (Fp3x2 lhs, Fp3x2 rhs) { return new Fp3x2 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator + (Fp3x2 lhs, Fp rhs) { return new Fp3x2 (lhs.c0 + rhs, lhs.c1 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator + (Fp lhs, Fp3x2 rhs) { return new Fp3x2 (lhs + rhs.c0, lhs + rhs.c1); }


        /// <summary>Returns the result of a componentwise subtraction operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator - (Fp3x2 lhs, Fp3x2 rhs) { return new Fp3x2 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator - (Fp3x2 lhs, Fp rhs) { return new Fp3x2 (lhs.c0 - rhs, lhs.c1 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator - (Fp lhs, Fp3x2 rhs) { return new Fp3x2 (lhs - rhs.c0, lhs - rhs.c1); }


        /// <summary>Returns the result of a componentwise division operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator / (Fp3x2 lhs, Fp3x2 rhs) { return new Fp3x2 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1); }

        /// <summary>Returns the result of a componentwise division operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator / (Fp3x2 lhs, Fp rhs) { return new Fp3x2 (lhs.c0 / rhs, lhs.c1 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator / (Fp lhs, Fp3x2 rhs) { return new Fp3x2 (lhs / rhs.c0, lhs / rhs.c1); }


        /// <summary>Returns the result of a componentwise modulus operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator % (Fp3x2 lhs, Fp3x2 rhs) { return new Fp3x2 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator % (Fp3x2 lhs, Fp rhs) { return new Fp3x2 (lhs.c0 % rhs, lhs.c1 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator % (Fp lhs, Fp3x2 rhs) { return new Fp3x2 (lhs % rhs.c0, lhs % rhs.c1); }


        /// <summary>Returns the result of a componentwise increment operation on a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator ++ (Fp3x2 val) { return new Fp3x2 (++val.c0, ++val.c1); }


        /// <summary>Returns the result of a componentwise decrement operation on a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator -- (Fp3x2 val) { return new Fp3x2 (--val.c0, --val.c1); }


        /// <summary>Returns the result of a componentwise less than operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator < (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator < (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 < rhs, lhs.c1 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator < (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs < rhs.c0, lhs < rhs.c1); }


        /// <summary>Returns the result of a componentwise less or equal operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator <= (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator <= (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 <= rhs, lhs.c1 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator <= (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs <= rhs.c0, lhs <= rhs.c1); }


        /// <summary>Returns the result of a componentwise greater than operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator > (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator > (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 > rhs, lhs.c1 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator > (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs > rhs.c0, lhs > rhs.c1); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator >= (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator >= (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 >= rhs, lhs.c1 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator >= (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs >= rhs.c0, lhs >= rhs.c1); }


        /// <summary>Returns the result of a componentwise unary minus operation on a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator - (Fp3x2 val) { return new Fp3x2 (-val.c0, -val.c1); }


        /// <summary>Returns the result of a componentwise unary plus operation on a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 operator + (Fp3x2 val) { return new Fp3x2 (+val.c0, +val.c1); }


        /// <summary>Returns the result of a componentwise equality operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator == (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator == (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 == rhs, lhs.c1 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator == (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs == rhs.c0, lhs == rhs.c1); }


        /// <summary>Returns the result of a componentwise not equal operation on two Fp3x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator != (Fp3x2 lhs, Fp3x2 rhs) { return new bool3x2 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp3x2 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator != (Fp3x2 lhs, Fp rhs) { return new bool3x2 (lhs.c0 != rhs, lhs.c1 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp value and a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x2 operator != (Fp lhs, Fp3x2 rhs) { return new bool3x2 (lhs != rhs.c0, lhs != rhs.c1); }



        /// <summary>Returns the Fp3 element at a specified index.</summary>
        unsafe public ref Fp3 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (Fp3x2* array = &this) { return ref ((Fp3*)array)[index]; }
            }
        }

        /// <summary>Returns true if the Fp3x2 is equal to a given Fp3x2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Fp3x2 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1); }

        /// <summary>Returns true if the Fp3x2 is equal to a given Fp3x2, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((Fp3x2)o); }


        /// <summary>Returns a hash code for the Fp3x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)MathFp.hash(this); }


        /// <summary>Returns a string representation of the Fp3x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("Fp3x2({0}, {1},  {2}, {3},  {4}, {5})", c0.x, c1.x, c0.y, c1.y, c0.z, c1.z);
        }

        /// <summary>Returns a string representation of the Fp3x2 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("Fp3x2({0}, {1},  {2}, {3},  {4}, {5})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider));
        }

    }

    public static partial class MathFp
    {
        /// <summary>Returns a Fp3x2 matrix constructed from two Fp3 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(Fp3 c0, Fp3 c1) { return new Fp3x2(c0, c1); }

        /// <summary>Returns a Fp3x2 matrix constructed from from 6 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(Fp m00, Fp m01,
                                  Fp m10, Fp m11,
                                  Fp m20, Fp m21)
        {
            return new Fp3x2(m00, m01,
                             m10, m11,
                             m20, m21);
        }

        /// <summary>Returns a Fp3x2 matrix constructed from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(Fp v) { return new Fp3x2(v); }

        /// <summary>Returns a Fp3x2 matrix constructed from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(int v) { return new Fp3x2(v); }

        /// <summary>Return a Fp3x2 matrix constructed from a int3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(int3x2 v) { return new Fp3x2(v); }

        /// <summary>Returns a Fp3x2 matrix constructed from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(uint v) { return new Fp3x2(v); }

        /// <summary>Return a Fp3x2 matrix constructed from a uint3x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x2 Fp3x2(uint3x2 v) { return new Fp3x2(v); }

        /// <summary>Return the Fp2x3 transpose of a Fp3x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp2x3 transpose(Fp3x2 v)
        {
            return Fp2x3(
                v.c0.x, v.c0.y, v.c0.z,
                v.c1.x, v.c1.y, v.c1.z);
        }

        /// <summary>Returns a uint hash code of a Fp3x2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(Fp3x2 v)
        {
            return csum(asuint(v.c0) * uint3(0x91475DF7u, 0x55E84827u, 0x90A285BBu) +
                        asuint(v.c1) * uint3(0x5D19E1D5u, 0xFAAF07DDu, 0x625C45BDu)) + 0xC9F27FCBu;
        }

        /// <summary>
        /// Returns a uint3 vector hash code of a Fp3x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint3 hashwide(Fp3x2 v)
        {
            return (asuint(v.c0) * uint3(0x6D2523B1u, 0x6E2BF6A9u, 0xCC74B3B7u) +
                    asuint(v.c1) * uint3(0x83B58237u, 0x833E3E29u, 0xA9D919BFu)) + 0xC3EC1D97u;
        }

    }
}
