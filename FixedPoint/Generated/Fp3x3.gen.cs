//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using static Unity.Mathematics.FixedPoint.MathFp;
using Unity.IL2CPP.CompilerServices;

#pragma warning disable 0660, 0661

namespace Unity.Mathematics.FixedPoint
{
    [System.Serializable]
    [Il2CppEagerStaticClassConstruction]
    public partial struct Fp3x3 : System.IEquatable<Fp3x3>, IFormattable
    {
        public Fp3 c0;
        public Fp3 c1;
        public Fp3 c2;

        /// <summary>Fp3x3 identity transform.</summary>
        public static readonly Fp3x3 identity = new Fp3x3((Fp)1, (Fp)0, (Fp)0,   (Fp)0, (Fp)1, (Fp)0,   (Fp)0, (Fp)0, (Fp)1);

        /// <summary>Fp3x3 zero value.</summary>
        public static readonly Fp3x3 zero;

        /// <summary>Constructs a Fp3x3 matrix from three Fp3 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(Fp3 c0, Fp3 c1, Fp3 c2)
        {
            this.c0 = c0;
            this.c1 = c1;
            this.c2 = c2;
        }

        /// <summary>Constructs a Fp3x3 matrix from 9 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(Fp m00, Fp m01, Fp m02,
                     Fp m10, Fp m11, Fp m12,
                     Fp m20, Fp m21, Fp m22)
        {
            this.c0 = new Fp3(m00, m10, m20);
            this.c1 = new Fp3(m01, m11, m21);
            this.c2 = new Fp3(m02, m12, m22);
        }

        /// <summary>Constructs a Fp3x3 matrix from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(Fp v)
        {
            this.c0 = v;
            this.c1 = v;
            this.c2 = v;
        }

        /// <summary>Constructs a Fp3x3 matrix from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(int v)
        {
            this.c0 = (Fp3)v;
            this.c1 = (Fp3)v;
            this.c2 = (Fp3)v;
        }

        /// <summary>Constructs a Fp3x3 matrix from a int3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(int3x3 v)
        {
            this.c0 = (Fp3)v.c0;
            this.c1 = (Fp3)v.c1;
            this.c2 = (Fp3)v.c2;
        }

        /// <summary>Constructs a Fp3x3 matrix from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(uint v)
        {
            this.c0 = (Fp3)v;
            this.c1 = (Fp3)v;
            this.c2 = (Fp3)v;
        }

        /// <summary>Constructs a Fp3x3 matrix from a uint3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Fp3x3(uint3x3 v)
        {
            this.c0 = (Fp3)v.c0;
            this.c1 = (Fp3)v.c1;
            this.c2 = (Fp3)v.c2;
        }


        /// <summary>Implicitly converts a single Fp value to a Fp3x3 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Fp3x3(Fp v) { return new Fp3x3(v); }

        /// <summary>Explicitly converts a single int value to a Fp3x3 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x3(int v) { return new Fp3x3(v); }

        /// <summary>Explicitly converts a int3x3 matrix to a Fp3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x3(int3x3 v) { return new Fp3x3(v); }

        /// <summary>Explicitly converts a single uint value to a Fp3x3 matrix by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x3(uint v) { return new Fp3x3(v); }

        /// <summary>Explicitly converts a uint3x3 matrix to a Fp3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Fp3x3(uint3x3 v) { return new Fp3x3(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator * (Fp3x3 lhs, Fp3x3 rhs) { return new Fp3x3 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator * (Fp3x3 lhs, Fp rhs) { return new Fp3x3 (lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator * (Fp lhs, Fp3x3 rhs) { return new Fp3x3 (lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2); }


        /// <summary>Returns the result of a componentwise addition operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator + (Fp3x3 lhs, Fp3x3 rhs) { return new Fp3x3 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator + (Fp3x3 lhs, Fp rhs) { return new Fp3x3 (lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator + (Fp lhs, Fp3x3 rhs) { return new Fp3x3 (lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2); }


        /// <summary>Returns the result of a componentwise subtraction operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator - (Fp3x3 lhs, Fp3x3 rhs) { return new Fp3x3 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator - (Fp3x3 lhs, Fp rhs) { return new Fp3x3 (lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator - (Fp lhs, Fp3x3 rhs) { return new Fp3x3 (lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2); }


        /// <summary>Returns the result of a componentwise division operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator / (Fp3x3 lhs, Fp3x3 rhs) { return new Fp3x3 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2); }

        /// <summary>Returns the result of a componentwise division operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator / (Fp3x3 lhs, Fp rhs) { return new Fp3x3 (lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator / (Fp lhs, Fp3x3 rhs) { return new Fp3x3 (lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2); }


        /// <summary>Returns the result of a componentwise modulus operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator % (Fp3x3 lhs, Fp3x3 rhs) { return new Fp3x3 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator % (Fp3x3 lhs, Fp rhs) { return new Fp3x3 (lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator % (Fp lhs, Fp3x3 rhs) { return new Fp3x3 (lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2); }


        /// <summary>Returns the result of a componentwise increment operation on a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator ++ (Fp3x3 val) { return new Fp3x3 (++val.c0, ++val.c1, ++val.c2); }


        /// <summary>Returns the result of a componentwise decrement operation on a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator -- (Fp3x3 val) { return new Fp3x3 (--val.c0, --val.c1, --val.c2); }


        /// <summary>Returns the result of a componentwise less than operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator < (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator < (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator < (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2); }


        /// <summary>Returns the result of a componentwise less or equal operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator <= (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator <= (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator <= (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2); }


        /// <summary>Returns the result of a componentwise greater than operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator > (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator > (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator > (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator >= (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator >= (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator >= (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2); }


        /// <summary>Returns the result of a componentwise unary minus operation on a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator - (Fp3x3 val) { return new Fp3x3 (-val.c0, -val.c1, -val.c2); }


        /// <summary>Returns the result of a componentwise unary plus operation on a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 operator + (Fp3x3 val) { return new Fp3x3 (+val.c0, +val.c1, +val.c2); }


        /// <summary>Returns the result of a componentwise equality operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator == (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator == (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator == (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2); }


        /// <summary>Returns the result of a componentwise not equal operation on two Fp3x3 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator != (Fp3x3 lhs, Fp3x3 rhs) { return new bool3x3 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp3x3 matrix and a Fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator != (Fp3x3 lhs, Fp rhs) { return new bool3x3 (lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a Fp value and a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool3x3 operator != (Fp lhs, Fp3x3 rhs) { return new bool3x3 (lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2); }



        /// <summary>Returns the Fp3 element at a specified index.</summary>
        unsafe public ref Fp3 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 3)
                    throw new System.ArgumentException("index must be between[0...2]");
#endif
                fixed (Fp3x3* array = &this) { return ref ((Fp3*)array)[index]; }
            }
        }

        /// <summary>Returns true if the Fp3x3 is equal to a given Fp3x3, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Fp3x3 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1) && c2.Equals(rhs.c2); }

        /// <summary>Returns true if the Fp3x3 is equal to a given Fp3x3, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((Fp3x3)o); }


        /// <summary>Returns a hash code for the Fp3x3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)MathFp.hash(this); }


        /// <summary>Returns a string representation of the Fp3x3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("Fp3x3({0}, {1}, {2},  {3}, {4}, {5},  {6}, {7}, {8})", c0.x, c1.x, c2.x, c0.y, c1.y, c2.y, c0.z, c1.z, c2.z);
        }

        /// <summary>Returns a string representation of the Fp3x3 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("Fp3x3({0}, {1}, {2},  {3}, {4}, {5},  {6}, {7}, {8})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c2.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c2.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider), c2.z.ToString(format, formatProvider));
        }

    }

    public static partial class MathFp
    {
        /// <summary>Returns a Fp3x3 matrix constructed from three Fp3 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(Fp3 c0, Fp3 c1, Fp3 c2) { return new Fp3x3(c0, c1, c2); }

        /// <summary>Returns a Fp3x3 matrix constructed from from 9 Fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(Fp m00, Fp m01, Fp m02,
                                  Fp m10, Fp m11, Fp m12,
                                  Fp m20, Fp m21, Fp m22)
        {
            return new Fp3x3(m00, m01, m02,
                             m10, m11, m12,
                             m20, m21, m22);
        }

        /// <summary>Returns a Fp3x3 matrix constructed from a single Fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(Fp v) { return new Fp3x3(v); }

        /// <summary>Returns a Fp3x3 matrix constructed from a single int value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(int v) { return new Fp3x3(v); }

        /// <summary>Return a Fp3x3 matrix constructed from a int3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(int3x3 v) { return new Fp3x3(v); }

        /// <summary>Returns a Fp3x3 matrix constructed from a single uint value by converting it to Fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(uint v) { return new Fp3x3(v); }

        /// <summary>Return a Fp3x3 matrix constructed from a uint3x3 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 Fp3x3(uint3x3 v) { return new Fp3x3(v); }

        /// <summary>Return the Fp3x3 transpose of a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp3x3 transpose(Fp3x3 v)
        {
            return Fp3x3(
                v.c0.x, v.c0.y, v.c0.z,
                v.c1.x, v.c1.y, v.c1.z,
                v.c2.x, v.c2.y, v.c2.z);
        }

        /// <summary>Returns the Fp3x3 full inverse of a Fp3x3 matrix.</summary>
        public static Fp3x3 inverse(Fp3x3 m)
        {
            Fp3 c0 = m.c0;
            Fp3 c1 = m.c1;
            Fp3 c2 = m.c2;

            Fp3 t0 = Fp3(c1.x, c2.x, c0.x);
            Fp3 t1 = Fp3(c1.y, c2.y, c0.y);
            Fp3 t2 = Fp3(c1.z, c2.z, c0.z);

            // ** NOTE:忽略计算过程中产生的极小值
            Fp3 m0 = IgnoreTooSmallNumber(t1 * t2.yzx) - IgnoreTooSmallNumber(t1.yzx * t2);
            Fp3 m1 = t0.yzx * t2 - t0 * t2.yzx;
            Fp3 m2 = t0 * t1.yzx - t0.yzx * t1;

            Fp rcpDet = (Fp)1 / csum(IgnoreTooSmallNumber(t0.zxy * m0));
            return IgnoreTooSmallNumber(Fp3x3(m0, m1, m2) * rcpDet);
        }

        /// <summary>Returns the determinant of a Fp3x3 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Fp determinant(Fp3x3 m)
        {
            Fp3 c0 = m.c0;
            Fp3 c1 = m.c1;
            Fp3 c2 = m.c2;

            Fp m00 = c1.y * c2.z - c1.z * c2.y;
            Fp m01 = c0.y * c2.z - c0.z * c2.y;
            Fp m02 = c0.y * c1.z - c0.z * c1.y;

            return c0.x * m00 - c1.x * m01 + c2.x * m02;
        }

        /// <summary>Returns a uint hash code of a Fp3x3 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(Fp3x3 v)
        {
            return csum(asuint(v.c0) * uint3(0xD42EAFA3u, 0xD9AFD06Du, 0x97A65421u) +
                        asuint(v.c1) * uint3(0x7809205Fu, 0x9C9F0823u, 0x5A9CA13Bu) +
                        asuint(v.c2) * uint3(0xAFCDD5EFu, 0xA88D187Du, 0xCF6EBA1Du)) + 0x9D88E5A1u;
        }

        /// <summary>
        /// Returns a uint3 vector hash code of a Fp3x3 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint3 hashwide(Fp3x3 v)
        {
            return (asuint(v.c0) * uint3(0xEADF0775u, 0x747A9D7Bu, 0x4111F799u) +
                    asuint(v.c1) * uint3(0xB5F05AF1u, 0xFD80290Bu, 0x8B65ADB7u) +
                    asuint(v.c2) * uint3(0xDFF4F563u, 0x7069770Du, 0xD1224537u)) + 0xE99ED6F3u;
        }

    }
}
